import unittest
import sys, os
sys.path.insert(0, os.path.abspath('../src/'))
from Pokemon import Pokemon
from Stats import Stats
from Type import Type
from Move import Move
from movelist import MoveList
from pokexmler import PokeXmler
from re import sub

class TestPokeXmler(unittest.TestCase):

    def setUp(self):
        self.valid_pokemon = Pokemon(\
            Type.Normal, Stats(100,100,100,100,100), MoveList(Move("move1",Type.Normal,3,2,1)))

        self.valid_xml = open("entrada1.xml","r").read()
        self.valid_clean_xml = PokeXmler()._clean_xml(self.valid_xml)

        # in entrada1.xml file there's a Pikachu and a Marill
        self.valid_pikachu = Pokemon(\
            Type.Fighting, Stats(200,100,100,100,100), MoveList(Move("Thunderbolt",Type.Fighting,90,90,15), Move("Slam",Type.Flying,70,80,20)), "Pikachu", 50)

        self.valid_marill = Pokemon(\
            Type.Flying, Stats(200,100,100,100,100), MoveList(Move("Surf",Type.Flying,100,90,15), Move("Hidro Pump",Type.Flying,70,100,5)), "Marill", 50)

    def test_instances(self):
        '''
        Tests if the functions of PokeXmler returns the it's expected types
        '''
        self.assertTrue(isinstance(PokeXmler().pokes_to_xml(self.valid_pokemon), str))
        self.assertTrue(isinstance(PokeXmler().str_to_pokes(self.valid_xml), list)) 
        self.assertTrue(isinstance(PokeXmler().str_to_pokes(self.valid_xml)[0], Pokemon)) # an element of the pokemon list is a pokemon

    def test_compares_pokes_to_xml(self):
        '''
        Compares the string generated by pokes_to_xml() with 2 pokemons to a valid xml file
        '''
        tested_xml = PokeXmler().pokes_to_xml(self.valid_pikachu, self.valid_marill)
        tested_xml = PokeXmler()._clean_xml(tested_xml)

        self.assertEqual(self.valid_clean_xml, tested_xml)

    def test_str_to_pokes_and_pokes_to_xml(self):
        '''
        If we use a xml to generate pokemons and use this pokemons to generate another xml,
        we expect that the last one is equals to the first one. This test checks if this happens.
        '''
    
        tested_pokemons = PokeXmler().str_to_pokes(self.valid_xml)
        tested_xml = PokeXmler().pokes_to_xml(*tested_pokemons)
        tested_xml = PokeXmler()._clean_xml(tested_xml)

        self.assertEqual(self.valid_clean_xml, tested_xml)

if __name__ == "__main__":
    unittest.main()
